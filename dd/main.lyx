#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\begin_modules
figs-within-sections
eqs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Software Engineering 2 Project: PowerEnJoy DD: Design Document
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename polimi.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Itemize
Alessio Mongelluzzo
\end_layout

\begin_layout Itemize
Michele Ferri
\end_layout

\begin_layout Itemize
Mattia Maffioli
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
This is the Design Document for the PowerEnJoy application.
 Its aim is to provide a functional description of the main architectural
 components, their interfaces and their interactions, together with the
 algorithms to implement the application logic and the User Interface design.
 Using UML standards, this document will show the structure of the system
 and the relationships between the modules.
 This document is written for project managers, developers, testers and
 Quality Assurance.
 It can be used for a structural overview to help maintenance and further
 development.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
The system supports a car-sharing service employing electric cars.
\end_layout

\begin_layout Standard
The software system is divided into four layers, which will be presented
 in the document.
 The architecture has to be easily extensible and maintainable in order
 to provide new functionalities.
\end_layout

\begin_layout Standard
Design patterns and architectural styles will be used for solving architectural
 problems in order to simplify the system comprehension and avoid misunderstandi
ngs during the implementation phase.
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Itemize

\series bold
RASD
\series default
: Requirements Analysis and Specification Document.
\end_layout

\begin_layout Itemize

\series bold
DD
\series default
: Design Document (this document).
\end_layout

\begin_layout Itemize

\series bold
RDBMS
\series default
: Relational Data Base Management System.
\end_layout

\begin_layout Itemize

\series bold
DB
\series default
: the database layer, handled by a RDBMS.
\end_layout

\begin_layout Itemize

\series bold
UI
\series default
: User Interface.
\end_layout

\begin_layout Itemize

\series bold
Application server
\series default
: the layer which provides the application logic and interacts with the
 DB and with the front-ends.
\end_layout

\begin_layout Itemize

\series bold
Back-end
\series default
: term used to identify the Application server.
\end_layout

\begin_layout Itemize

\series bold
Front-end
\series default
: the components which use the application server services, namely the web
 front-end and the mobile applications.
\end_layout

\begin_layout Itemize

\series bold
Web server
\series default
: the component that implements the web-based front-end.
 It interacts with the application server and with the users' browsers.
\end_layout

\begin_layout Itemize

\series bold
MVC
\series default
: Model-View-Controller.
\end_layout

\begin_layout Itemize

\series bold
JDBC
\series default
: Java DataBase Connectivity.
\end_layout

\begin_layout Itemize

\series bold
JPA
\series default
: Java Persistence API.
\end_layout

\begin_layout Itemize

\series bold
EJB
\series default
: Enterprise JavaBean.
\end_layout

\begin_layout Itemize

\series bold
ACID
\series default
: Atomicity, Consistency, Integrity and Durability.
\end_layout

\begin_layout Itemize

\series bold
MVC
\series default
: Model-View-Controller design pattern.
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Standard
This document refers to the project rules of the Software Engineering 2
 project, to the DD assignment, and to the previous deliverable (RASD).
\end_layout

\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Standard
This document is structured in five parts:
\end_layout

\begin_layout Itemize

\series bold
Chapter 1: Introduction.

\series default
 This section provides general information about the DD document and the
 system to be developed.
\end_layout

\begin_layout Itemize

\series bold
Chapter 2: Architectural Design.

\series default
 This section shows the main components of the systems with their sub-components
 and their relationships, along with their static and dynamic design.
 This section will also focus on design choices, styles, patterns and paradigms.
\end_layout

\begin_layout Itemize

\series bold
Chapter 3: Algorithm Design.

\series default
 This section will present and discuss in detail the algorithms designed
 for the system functionalities, independently from their concrete implementatio
n.
\end_layout

\begin_layout Itemize

\series bold
Chapter 4: User Interface Design.

\series default
 This section shows how the user interface will look like and behave, by
 means of concept graphics and UX modeling.
\end_layout

\begin_layout Itemize

\series bold
Chapter 5: Requirements Traceability.

\series default
 This section shows how the requirements in the RASD are satisfied by the
 design choices of the DD.
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
In this chapter we will analyse the components that build up PowerEnJoy
 system.
 To begin with, a high-level analysis is carried out, showing how the main
 blocks interact.
 Then the single components are detailed in chapter 2.3 and the relation
 between logic layers and physical tiers is described in chapter 2.4.
 In chapter 2.6 we anlyse in depth the interfaces that allow the different
 components to communicate.
 The dynamics of each feature of the system is detailed in chapter 2.5.
\end_layout

\begin_layout Subsection
High level components and their interaction
\end_layout

\begin_layout Standard
A client/server architectural style is chosen to undergo the need for a
 distributed application.
 In particular, the server side is divided into three main components, to
 separate the data, the application logic and the presentation.
 These three components are:
\end_layout

\begin_layout Standard
- a DBMS, that manages the storage and retrieval of all the data needed
 by the application to work;
\end_layout

\begin_layout Standard
- an Application Server, that contains all the application logic to provide
 the services requested by clients;
\end_layout

\begin_layout Standard
- a Presentation Server, whose job is to provide the web interface for the
 users.
\end_layout

\begin_layout Standard
In particular, the DBMSr communicates with the Application Server by providing
 the data needed for the computation, but the Data Server does not implement
 any kind of application logic.
 The Presentation Server communicates with the Application Server but it
 does not contain any application logic as well.
 The application layer is service-oriented, in order to increase the independenc
e among the services and the global fault tolerance of the architecture.
\end_layout

\begin_layout Standard
From the client side, there can be three kinds of clients:
\end_layout

\begin_layout Standard
- Mobile, that request services through the mobile application (PowerEnJoy
 Mobile);
\end_layout

\begin_layout Standard
- Browser, that request services through the web front-end (PowerEnJoy Web);
\end_layout

\begin_layout Standard
- Employee App, that request employee's functionalities;
\end_layout

\begin_layout Standard
Mobile clients are fatter, as they directly communicate with the Application
 Server of the server side and incorporate the presentation; instead, in
 the case of Browser clients the GUI is distributed between the two sides
 and this kind of client, which is therefore thinner, has to go through
 the Presentation Server in order to request the services of the Application
 Server.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The high level components of the system are:
\end_layout

\begin_layout Itemize

\series bold
Mobile application: 
\series default
the mobile client on the user's device.
\end_layout

\begin_layout Itemize

\series bold
User's browser: 
\series default
it represents the browser of the user's computer.
\end_layout

\begin_layout Itemize

\series bold
Web server: 
\series default
it provides the web interface the user accesses through his/her browser.
\end_layout

\begin_layout Itemize

\series bold
Application server: 
\series default
it contains the application logic: all the functionalities and algorithms
 that make the system work.
\end_layout

\begin_layout Itemize

\series bold
(R)DBMS: 
\series default
(Relational) Database Management System.
 Software application that interacts with databases.
 It allows to query, update and administrate the database.
\end_layout

\begin_layout Itemize

\series bold
Database:
\series default
 it is the layer where all data are stored.
 It is a relational database, therefore ACID properties must be guaranteed.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/DD_highlevel.png
	width 40page%
	height 40page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High level representation of the system architecture.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/tiers_interaction.jpg
	width 80page%
	height 80page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Representation of high level components detailed with JEE components.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
The system architecture is based on 4 main components:
\end_layout

\begin_layout Itemize

\series bold
Mobile app
\end_layout

\begin_deeper
\begin_layout Standard
The mobile client implementation depends on the specific platform.
 The iOS application is implemented in Swift and mainly uses UIKit framework
 to manage the UI interface.
 Instead, the Android application is implemented in Java and mainly uses
 android.view package for graphical management.
 The application core is composed by a controller which translates the inputs
 from the UI into remote functions calls via RESTful APIs.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Web Server
\end_layout

\begin_deeper
\begin_layout Standard
JSF (Java Server Faces) is used to implement the web server.
 JSF is a MVC-based framework to perform web pages presentation.
 The web tier only works as a presentantion layer: RESTful APIs are used
 to interface with the application server, where all the business logic
 is set.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Application Server
\end_layout

\begin_deeper
\begin_layout Standard
The following diagram is meant to show the flow of information from boundary
 classes to database entities.
 However, the system has to be developed so that the interaction between
 boundary and control classes is filtered by an orchestrator whose task
 is to dispatch boundary requests to the corresponding application manager
 (i.e.
 a session bean in jee environment).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/BCE_DD.png
	width 80page%
	height 80page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Boundary-Control-Entities diagram representing the interaction between UI,
 business components and database entities.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Client requests are forwarded to the orchestrator.
 This software module dispatches requests to the correct application module
 so that the client layer results fully decoupled from the application layer:
 further modules can be added in the future without affecting the system
 structure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/ApplicationServerModules.png
	width 80page%
	height 80page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A high-level representation of client-server interaction w/ orchestrator.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\noun on
Account Manager
\end_layout

\begin_layout Standard
The task of this module deals with account editing and information retrieval.
 It interacts with the 
\begin_inset Quotes eld
\end_inset

user and personnel
\begin_inset Quotes erd
\end_inset

 DB accessing and modifying the 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 entity.
\end_layout

\begin_layout Standard
It allows to log in/register to the system, consult/modify personal information,
 delete profile.
\end_layout

\begin_layout Standard

\series bold
\noun on
Reservation Manager
\end_layout

\begin_layout Standard
The task of this module deals with car reservation.
\end_layout

\begin_layout Standard
It interacts with the 
\begin_inset Quotes eld
\end_inset

rides and reservation
\begin_inset Quotes erd
\end_inset

 DB creating new 
\begin_inset Quotes eld
\end_inset

reservation
\begin_inset Quotes erd
\end_inset

 entities every time a new reservation is made by a user.
\end_layout

\begin_layout Standard
It allows to look for a car, make a reservation, unlock cars managing the
 reservation logic.
\end_layout

\begin_layout Standard

\series bold
\noun on
Ride Manager
\end_layout

\begin_layout Standard
The task of this module is to manage rides.
 It has to compute the ride cost taking into account possible fare modifiers,
 i.e.
 discounts/extra charges.
\end_layout

\begin_layout Standard
It interacts with the 
\begin_inset Quotes eld
\end_inset

rides and reservation
\begin_inset Quotes erd
\end_inset

 DB creating new 
\begin_inset Quotes eld
\end_inset

ride
\begin_inset Quotes erd
\end_inset

 entities every time a new ride is started.
\end_layout

\begin_layout Standard
It allows to start a ride, even with money-saving option enabled, complete
 a ride, pay for the ride.
\end_layout

\begin_layout Standard

\series bold
\noun on
Maintenance Manager
\end_layout

\begin_layout Standard
This module allows PowerEnJoy to manage its employees so that every time
 a car needs maintenance a request for intervention is created.
 
\end_layout

\begin_layout Standard
It implements an Observable-Observer pattern to track battery levels and
 cars position.
\end_layout

\begin_layout Standard
It interacts with the 
\begin_inset Quotes eld
\end_inset

user and personnel
\begin_inset Quotes erd
\end_inset

 DB, 
\begin_inset Quotes eld
\end_inset

cars
\begin_inset Quotes erd
\end_inset

 DB, 
\begin_inset Quotes eld
\end_inset

areas
\begin_inset Quotes erd
\end_inset

 DB in order to find availbale employees, check battery levels and cars
 position, update cars states and employees' history.
\end_layout

\begin_layout Standard
It allows the system to dispatch requests to the nearest available employee,
 who can accept/decline.
\end_layout

\begin_layout Itemize

\series bold
Database
\end_layout

\begin_layout Standard
MySQL Community Edition is used as RDBMS and InnoDB is used as storage engine.
 The database tier communicates with the application logic tier: object-relation
s mapping is managed using Java Persistence API.
 Access to data must be secure: only authorized users with valid credentials
 can retrieve their personal data.
 The conceptual schema of the database is represented by the following E-R
 diagram.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/er.png
	width 60page%
	height 60page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
ER diagram of the database relations
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Four subject-oriented databases are used to store data:
\end_layout

\begin_layout Itemize
User and Personnel DB
\end_layout

\begin_layout Itemize
Cars DB
\end_layout

\begin_layout Itemize
Areas DB
\end_layout

\begin_layout Itemize
Rides and Reservations DB
\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
The allocation of software components to hardware components has to be as
 follows:
\end_layout

\begin_layout Standard
Web Server and Application Server are set on two different tiers.
\end_layout

\begin_layout Standard
Database Server is set on its own tier.
\end_layout

\begin_layout Standard
The communication with the application server uses JAX-RS to allow RESTful
 API client side.
 The application server interacts with the database server with SQL DBMS.
\end_layout

\begin_layout Standard
The following diagram represents the deployment of the system:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/deploymentdiagram.png
	width 60page%
	height 60page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The deployment diagram of the system.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Standard
We represent the dynamic behaviour of the system with sequence diagrams.
 Each diagram shows a specific feature of the application.
\end_layout

\begin_layout Subsubsection
Web Registration
\end_layout

\begin_layout Standard
This diagram shows the behaviour of the application when a user performs
 a registration action.
 We chose to represent the system dynamics in case of web application.
 The same diagram would state the mobile app behaviour if we do not consider
 the Registration servlet.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/webregistrationsequence.png
	width 70page%
	height 70page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram for registration action.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Web Login
\end_layout

\begin_layout Standard
This diagram shows the behaviour of the application when a user performs
 a login action.
 We chose to represent the system dynamics in case of web application.
 The same diagram would state the mobile app behaviour if we do not consider
 the Login servlet.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/webloginsequence.png
	width 80page%
	height 70page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram for login action.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Web lookup-reserve
\end_layout

\begin_layout Standard
The following diagram represents the behaviour of the application when a
 user looks for a car to reserve.
 We chose to represent the system dynamics in case of web application.
 The same diagram would state the mobile app behaviour if we do not consider
 the Lookup servlet.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/weblookupreservesequence.png
	width 70page%
	height 70page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram for car look-up and reservation.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Unlock/Lock and Ride
\end_layout

\begin_layout Standard
This diagram shows how the system behaves when a user wants to unlock a
 reserved car and perform a ride:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/unlockrideandlocksequence.png
	width 80page%
	height 70page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram for car unlock and ride management.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Web User profile management
\end_layout

\begin_layout Standard
The following diagram shows the dynamics of the system in case a user wants
 to manage its personal information:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/userprofilemanagementsequence.png
	width 80page%
	height 70page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram for profile info management.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Car Maintenance
\end_layout

\begin_layout Standard
This diagram represents the flow of actions performed by the system when
 cars maintenance is needed:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename img/maintenancesequence.png
	width 70page%
	height 70page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram for car maintenance.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component interfaces
\end_layout

\begin_layout Subsubsection
Front-end to Application Server
\end_layout

\begin_layout Standard
The Mobile app and the Web App must communicate with the application server
 through a RESTful interface, which is implemented in the application server
 using JAX-RS.
 XML is used as the data representation language.
\end_layout

\begin_layout Standard
The REST resources and the offered functionalities are implemented as follows:
\end_layout

\begin_layout Itemize

\series bold
\noun on
Account Manager
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
registration: 
\series default
this function takes as input the personal information of the user and his/her
 payment information and driving license.
 It checks whether the input information is valid.
 If information is correct and no conflicts are spotted with already registered
 users a new User tuple is created in the database, otherwise an error message
 is returned.
\end_layout

\begin_layout Itemize

\series bold
login:
\series default
 this function takes as input a couple username/e-mail and password and
 checks whether there is an existing tuple in the database with the given
 username and password and the ban field set to false.
 If so, the access to the app services is granted.
 Otherwise, an error message is returned.
\end_layout

\begin_layout Itemize

\series bold
viewProfile: 
\series default
this function retrieves the user's profile information from the User relation
 in the database and returns them.
\end_layout

\begin_layout Itemize

\series bold
editProfile: 
\series default
this function allows the user to modify retrieved data: it takes as input
 the modified personal/payment information or driving license number.
 It checks whether provided information is valid and, if so, updates the
 corresponding user tuple in the database.
 Otherwise an error message is returned.
\end_layout

\begin_layout Itemize

\series bold
deleteProfile: 
\series default
this function deletes the tuple corresponding to the caller user in the
 database.
 It returns a confirmation message, then a final log-out is performed.
\end_layout

\begin_layout Itemize

\series bold
ban:
\series default
 this function takes as input a user and sets his/her 
\begin_inset Quotes eld
\end_inset

ban
\begin_inset Quotes erd
\end_inset

 attribute to true.
 It then performs a log-out to the user.
\end_layout

\begin_layout Itemize

\series bold
unban:
\series default
 this function takes as input a user and sets his/her 
\begin_inset Quotes eld
\end_inset

ban
\begin_inset Quotes erd
\end_inset

 attribute to false.
\end_layout

\begin_layout Itemize

\series bold
generateEmployee: 
\series default
this function generates special username and password for an employee and
 returns them.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\noun on
Reservation Manager
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
findAvailableCars: 
\series default
this function takes as input a position and queries the 
\begin_inset Quotes eld
\end_inset

Car
\begin_inset Quotes erd
\end_inset

 database in order to return all the cars whose state is 
\begin_inset Quotes eld
\end_inset

available
\begin_inset Quotes erd
\end_inset

 and whose position is near to position parameter.
\end_layout

\begin_layout Itemize

\series bold
reserve: 
\series default
this function takes as input the user and a car and updates the selected
 car tuple in the database changing the attribute 
\begin_inset Quotes eld
\end_inset

state
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

reserved
\begin_inset Quotes erd
\end_inset

.
 It creates a new 
\begin_inset Quotes eld
\end_inset

reservation
\begin_inset Quotes erd
\end_inset

 tuple in the database and calls for the digital payment service to perform
 the pre-reservation deposit.
 It eventually returns a confirmation message once the operation is accomplished.
 If the operation fails an error message is returned.
\end_layout

\begin_layout Itemize

\series bold
unlock: 
\series default
this function takes as input a car and updates the selected car tuple in
 the database setting its 
\begin_inset Quotes eld
\end_inset

lock
\begin_inset Quotes erd
\end_inset

 attribute to false.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\noun on
Ride Manager
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
createRide: 
\series default
this function takes as input a car and a user and creates a new ride tuple
 in the database whose attribute 
\begin_inset Quotes eld
\end_inset

state
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

active
\begin_inset Quotes erd
\end_inset

.
 It calls for the digital payment service to refund the pre-reservation
 deposit.
 
\end_layout

\begin_layout Itemize

\series bold
computeMoneySavDest: 
\series default
this function takes as input the location specified by the user and returns
 the optimal destination, i.e.
 the location of a charging area with optimal:
\end_layout

\begin_deeper
\begin_layout Itemize
distance from destination parameter
\end_layout

\begin_layout Itemize
number of available plugs
\end_layout

\begin_layout Itemize
distribution of cars in the city
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
computeCost: 
\series default
this function takes as input the time of the ride and car sensors values
 and returns the cost the user must pay considering fare modifiers.
\end_layout

\begin_layout Itemize

\series bold
terminateRide: 
\series default
this function takes as input a ride and updates its state to 
\begin_inset Quotes eld
\end_inset

completed
\begin_inset Quotes erd
\end_inset

.
 It calls for the digital payment service to perform the payment transaction.
 If the operation is successful, then a confirmation message is returnes.
 Otherwise, it calls for the account manager to ban the user and an error
 message is returned.
\end_layout

\begin_layout Itemize

\series bold
lock: 
\series default
this function takes as input a car and updates the selected car tuple in
 the database setting its 
\begin_inset Quotes eld
\end_inset

lock
\begin_inset Quotes erd
\end_inset

 attribute to true.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\noun on
Maintenance Manager
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
findAvailableEmployees: 
\series default
this function takes as input a car and queries the database in order to
 returns a collection of employees whose attribute 
\begin_inset Quotes eld
\end_inset

state
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

available
\begin_inset Quotes erd
\end_inset

, ordered by distance from the car.
 
\end_layout

\begin_layout Itemize

\series bold
generateRequest: 
\series default
this function takes as input a car and an employee and generates an intervention
 message to send to the employee.
\end_layout

\begin_layout Itemize

\series bold
forwardRequest: 
\series default
this function takes as input an intervention request and sends a notification
 message to the employee.
\end_layout

\begin_layout Itemize

\series bold
findDestination: 
\series default
this function takes as input the GPS location of the car and returns the
 optimal destination, i.e.
 the location of the nearest charging area to the car.
\end_layout

\end_deeper
\begin_layout Subsubsection
Browser to Web Server
\end_layout

\begin_layout Standard
All the communications between users' browser and web server are implemented
 with HTTPS requests, thus all the traffic must be protected with SSL encryption.
\end_layout

\begin_layout Subsubsection
Application Server to Database
\end_layout

\begin_layout Standard
The communication between the application server and the DBMS must be via
 Java Persistence API (JPA).
 Thus, object-relation mapping is performed by JPA and JPQL (Java Persistence
 Query Language) allows to write queries that work regardless of the underlying
 data store.
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\begin_layout Standard
The following architectural styles have been used:
\end_layout

\begin_layout Standard

\series bold
Client-server: 
\series default
the front end (mobile app and employee app) are clients communicating with
 the application server.
 The browser supporting the web app is a client communicating with the web
 server.
 The application server behaves as a client quering the database (server).
\end_layout

\begin_layout Standard

\series bold
Service-Oriented Architecture (SOA): 
\series default
the way components interact with the application server is thought to be
 service-oriented.
 The single components are analysed from a high-level point of view depending
 on the service the offer.
 SOA allows to easily extend the system by building and adding independent
 modules to the core.
 Moreover, being the modules decoupled, their testing can be carried out
 independently module by module.
\end_layout

\begin_layout Standard

\series bold
Model-View-Controller (MVC): 
\series default
MVC pattern is followed throughout the whole system design.
 The clients are front-end components (views) interacting with logic components
 (controllers) which drive the information flow and the information retrieval
 from the database (model).
\end_layout

\begin_layout Subsection
Other design decisions
\end_layout

\begin_layout Subsubsection
Password storage
\end_layout

\begin_layout Standard
Users’ passwords are not stored in plaintext, but they are hashed and salted
 with strong cryptographic hash functions.
 
\end_layout

\begin_layout Subsubsection
Maps
\end_layout

\begin_layout Standard
The system uses an external service, 
\shape italic
Google Maps
\shape default
, to calculate distances and visualize maps.
 The reasons of this choice are the following:
\end_layout

\begin_layout Itemize
manually developing maps is not a viable solution due to the enormous effort
 required to code and collect data;
\end_layout

\begin_layout Itemize

\shape slanted
Google Maps
\shape default
 is a well-established, tested and reliable software component already used
 by millions of people around the world, and therefore the users feel comfortabl
e with a software they know and use everyday;
\end_layout

\begin_layout Itemize

\shape slanted
Google Maps
\shape default
 offers APIs, enabling programmatic access to its features, and can be used
 both on the server side (calculations, shortest paths...) and on the client
 side (map visualization).
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Subsection
Final price calculation with discounts and additional charges
\end_layout

\begin_layout Standard
As stated in the RASD, discounts are applied to the fare of users who have
 a virtuous behaviour, and additional charges are applied to users who have
 an inconvenient behaviour instead.
\end_layout

\begin_layout Standard
Specifically, the discounts and additional charges pre-defined by the systems
 are:
\end_layout

\begin_layout Itemize
30% discount if the car is plugged into a plug within a 2 minutes time frame
 from the moment the engine stops.
\end_layout

\begin_layout Itemize
20% discount if the battery level at the end of the ride is measured to
 be at least 50% of the total charge.
\end_layout

\begin_layout Itemize
10% discount if the number of people in the car during the ride is measured
 to be 3 or more.
\end_layout

\begin_layout Itemize
30% additional charge if the location of the car is more than 3 km away
 from the nearest charging area or if the battery level is lower than 20%
 of the total charge.
\end_layout

\begin_layout Standard
This algorithm is run by the back-end every time the state of a ride is
 set to completed.
 The state of a ride is automatically set to completed as soon as the engine
 is stopped by the driver.
\end_layout

\begin_layout Standard
The input data are:
\end_layout

\begin_layout Itemize

\shape italic
r
\shape default
: the ride which has to be checked for discount or additional charge eligibility
\end_layout

\begin_layout Itemize

\shape italic
D
\shape default
: list of discounts
\end_layout

\begin_layout Itemize

\shape italic
A
\shape default
: list of additional charges
\end_layout

\begin_layout Standard
The algorithm returns the final price the user has to be charged with.
\end_layout

\begin_layout Standard
The price per second is supposed to be a system constant.
\end_layout

\begin_layout Standard
A discount has an integer value between 1 and 100 representing the value
 of the discount in percentage.
 Similarly, an additional charge has an integer value between the minimum
 representable integer value and -1.
\end_layout

\begin_layout Standard
Discount/additional charge applicability can be checked by calling a method
 on the modifier itself, that takes 
\shape italic
r
\shape default
 (the ride) as input and returns 
\shape italic
true
\shape default
 or 
\shape italic
false
\shape default
 depending on whether that modifier is applicable or not.
\end_layout

\begin_layout Standard
In order to make the algorithm as reusable as possible, and ease the future
 insertion of new discounts/additional charges or the removal of existing
 ones, the algorithm iterates over a generic list of discounts, and a generic
 list of additional charges.
\end_layout

\begin_layout Standard
The algorithm works as follows:
\end_layout

\begin_layout Enumerate

\shape italic
D
\shape default
 is sorted by descending value (e.g.
 30, 20, 10...).
\end_layout

\begin_layout Enumerate
The standard price is calculated as:
\begin_inset Formula 
\begin{equation}
price=(r.endDate-r.beginDate)\ast PRICEPERSECOND
\end{equation}

\end_inset


\end_layout

\begin_layout Enumerate
For every discount 
\begin_inset Formula $d_{i}$
\end_inset

 in 
\shape italic
D:
\end_layout

\begin_deeper
\begin_layout Enumerate
if the discount is applicable on 
\shape italic
r
\shape default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
update 
\shape italic
price
\shape default
 according to this formula:
\begin_inset Formula 
\begin{equation}
price=price\ast(1-\frac{d_{i}.value}{100})
\end{equation}

\end_inset


\end_layout

\begin_layout Enumerate
exit the loop.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
For every additional charge 
\begin_inset Formula $a_{i}$
\end_inset

 in 
\shape italic
A
\shape default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
if the additional charge is applicable on 
\shape italic
r
\shape default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
update 
\shape italic
price
\shape default
 according to formula (3.2).
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Return 
\shape italic
price
\shape default
, which is the final price the user has to be charged with.
\end_layout

\begin_layout Standard
Notice that every additional charge is applied, while only the largest discount
 is applied.
 This is achieved by sorting the discount list by descending value at step
 1 of the algorithm and exiting the loop as soon as the first discount of
 that list is applied.
\end_layout

\begin_layout Standard
Also notice that because of the way discount and additional charge values
 are represented, the formula for calculating the updated price is the same
 in both cases and can be isolated in a separate function.
\end_layout

\begin_layout Subsection
Money saving ride destination calculation
\end_layout

\begin_layout Standard
As stated in the RASD, money saving option allows the driver to specify
 the destination of the ride.
 The system will then suggest an optimal charging area to park at, in order
 to get a discount on the fare.
\end_layout

\begin_layout Standard
The applied discount would be the one already described in Section 3.1, Final
 price calculation with discounts and additional charges, for plugging the
 car within a 2 minutes time frame from the moment the engine stops.
\end_layout

\begin_layout Standard
The money saving option serves the purpose of simplifying the operation
 of driving to a charging area, because such an area is suggested to the
 user.
\end_layout

\begin_layout Standard
The suggested charging area has to be optimal depending on:
\end_layout

\begin_layout Enumerate
closeness to the user-specified destination;
\end_layout

\begin_layout Enumerate
availability of plugs;
\end_layout

\begin_layout Enumerate
uniform distribution of cars in the city.
\end_layout

\begin_layout Standard
This algorithm is run by the back-end every time the user enables the money
 saving option and inputs the destination that he/she wants to reach.
\end_layout

\begin_layout Standard
The input data are:
\end_layout

\begin_layout Itemize

\shape italic
dest
\shape default
: the coordinates of the location the user wants to reach (latitude, longitude).
\end_layout

\begin_layout Itemize

\shape italic
A
\shape default
: list of charging areas.
\end_layout

\begin_layout Itemize
\begin_inset Formula $w_{d}$
\end_inset

: the weight associated to the distance of the charging area from the user-speci
fied destination.
\end_layout

\begin_layout Itemize
\begin_inset Formula $w_{p}$
\end_inset

: the weight associated to the availability of plugs at the charging area.
\end_layout

\begin_layout Itemize
\begin_inset Formula $w_{c}$
\end_inset

: the weight associated to the number of cars near the charging area.
\end_layout

\begin_layout Standard
The algorithm returns the charging area which is calculated to be the best
 w.r.t.
 the three constraints stated above.
\end_layout

\begin_layout Standard
The default value of 
\begin_inset Formula $w_{d}$
\end_inset

 and 
\begin_inset Formula $w_{c}$
\end_inset

 is 1, and the default value of 
\begin_inset Formula $w_{p}$
\end_inset

 is 0.5.
 Different weight values can be used for increasing/reducing the influence
 of a certain factor (e.g.
 
\begin_inset Formula $w_{d}=2$
\end_inset

 means that the distance of the charging area from the user-specified destinatio
n would impact the choice twice as much as with the default value).
\end_layout

\begin_layout Standard
The number of cars which are 
\begin_inset Quotes eld
\end_inset

near
\begin_inset Quotes erd
\end_inset

 a certain charging area can be calculated by calling a specific method
 on the charging area itself.
 The method returns the number of cars which are located within a certain
 radius from the charging area (including the ones which are plugged in
 the charging area itself).
\end_layout

\begin_layout Standard
The algorithm works as follows:
\end_layout

\begin_layout Enumerate
Initialize two variables:
\end_layout

\begin_deeper
\begin_layout Enumerate

\shape italic
a
\shape default
, the charging area to be returned (initially null).
\end_layout

\begin_layout Enumerate

\shape italic
v
\shape default
, the value associated with 
\shape italic
a
\shape default
 (initially
\begin_inset Formula $+\infty$
\end_inset

)
\end_layout

\end_deeper
\begin_layout Enumerate
For every charging area 
\begin_inset Formula $a_{i}$
\end_inset

 in 
\shape italic
A
\shape default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
if the charging area is full, meaning that 
\begin_inset Formula $a_{i}.availablePlugs=0$
\end_inset

: skip to the next charging area; else calculate:
\begin_inset Formula 
\begin{equation}
p=a_{i}.totalPlugs-a_{i}.availablePlugs
\end{equation}

\end_inset

which is the number of busy plugs at the charging area 
\begin_inset Formula $a_{i}$
\end_inset

.
\end_layout

\begin_layout Enumerate
calculate the distance 
\shape italic
d
\shape default
 between 
\shape italic
dest
\shape default
 and 
\begin_inset Formula $a_{i}$
\end_inset

 using a suitable formula for calculating distances between two Latitude/Longitu
de points, for example the Haversine formula.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Haversine formula: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Haversine_formula
\end_layout

\end_inset


\end_layout

\end_inset

 
\begin_inset Foot
status open

\begin_layout Plain Layout
Calculate distance, bearing and more between Latitude/Longitude points:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.movable-type.co.uk/scripts/latlong.html
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
calculate the number 
\shape italic
c
\shape default
 of cars near 
\begin_inset Formula $a_{i}$
\end_inset

 by calling the method mentioned above.
\end_layout

\begin_layout Enumerate
calculate the value 
\begin_inset Formula $v_{i}$
\end_inset

 associated with 
\begin_inset Formula $a_{i}$
\end_inset

 according to the following formula (weighted sum):
\begin_inset Formula 
\begin{equation}
v_{i}=\frac{w_{d}d+w_{p}p+w_{c}c}{w_{d}+w_{p}+w_{c}}
\end{equation}

\end_inset


\end_layout

\begin_layout Enumerate
if 
\begin_inset Formula $v_{i}<v$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
update 
\shape italic
a
\shape default
 and 
\shape italic
v
\shape default
 with the current values of 
\begin_inset Formula $a_{i}$
\end_inset

 and 
\begin_inset Formula $v_{i}$
\end_inset

 respectively.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Return 
\shape italic
a
\shape default
.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
Let's imagine a possible scenario where a user chooses the money saving
 option and the algorithm has to determine the best charging area according
 to the factors mentioned above:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename algorithm_design/example.png
	width 40page%
	height 40page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Simple example map showing position of user-specified destination, charging
 areas with number of busy and available plugs, and cars.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the sake of simplicity, in this example the coordinates are not represented
 as Latitude/Longitude but as simple 
\begin_inset Formula $(row,column)$
\end_inset

 pairs.
\end_layout

\begin_layout Standard
Assuming the default values for 
\begin_inset Formula $w_{d}$
\end_inset

, 
\begin_inset Formula $w_{p}$
\end_inset

 and 
\begin_inset Formula $w_{c}$
\end_inset

, and that the method calculating the number of cars which are 
\begin_inset Quotes eld
\end_inset

near
\begin_inset Quotes erd
\end_inset

 a certain charging area detects cars which are distant at most 
\begin_inset Formula $\sqrt{5}$
\end_inset

 units of distance, the intermediate values calculated by the algorithm
 at step 2 are:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Charging Area
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
v
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(9,0)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sqrt{50}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.828$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(6,1)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sqrt{20}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.989$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(2,4)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sqrt{5}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.094$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(7,7)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sqrt{13}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.642$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The lowest value of v is the one associated with the charging area at 
\begin_inset Formula $(7,7)$
\end_inset

, so that charging area is returned.
 It's not the nearest one, but it's much nearer than the one at 
\begin_inset Formula $(9,0)$
\end_inset

 and it has only 2 cars nearby.
 The nearest charging area has 4 cars nearby and therefore it has a higher
 value.
\end_layout

\begin_layout Section
User Interface Design
\end_layout

\begin_layout Subsection
UX diagram
\end_layout

\begin_layout Standard
The UX diagram shows the different screens of the User Interface of the
 clients and the interaction between them.
\end_layout

\begin_layout Standard
The normal flow of a logged user who wants to reserve and use a car is:
\end_layout

\begin_layout Enumerate
look for a car on the map;
\end_layout

\begin_layout Enumerate
select the desired car and view car data;
\end_layout

\begin_layout Enumerate
confirm car reservation;
\end_layout

\begin_layout Enumerate
view reservation info such as the data of the reserved car, reservation
 date, and time left to unlock the car;
\end_layout

\begin_layout Enumerate
unlock the car from the reservation info screen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename interface_design/ux_diagram.png
	width 60page%
	height 60page%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The UX diagram.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
User Interface concept
\end_layout

\begin_layout Subsubsection
Web interface
\end_layout

\begin_layout Standard
These mock-ups show how the user interface for the web application should
 look like on web browser.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename mockups/web/home_final.png
	width 50page%
	height 50page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The home page of PowerEnJoy before log-in or registration.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename mockups/web/logged_home.png
	width 50page%
	height 50page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Home page for the logged in users linking to all the main functionalities
 in the web application.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename mockups/web/profile_manage.png
	width 50page%
	height 50page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Profile management screen in the web application.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makebox[
\backslash
textwidth][c]{
\end_layout

\end_inset


\begin_inset Graphics
	filename mockups/web/register.png
	width 50page%
	height 50page%
	keepAspectRatio

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration screen for new users in the web application.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
Mobile interface
\end_layout

\begin_layout Standard
These mock-ups show how the interface of the PowerEnJoy mobile application
 will look like.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="50text%">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../rasd/mockups/login.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../rasd/mockups/register.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial login activity on the mobile application.
 This screen also presents the option for registering if the visitor does
 not have an account.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Registration activity for new users in the mobile application.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="50text%">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename mockups/mobile/home.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename mockups/mobile/profile.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial activity for logged in users linking to all the main functionalities
 in the mobile application.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Profile management activity in the web application.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="50text%">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../rasd/mockups/lookup.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../rasd/mockups/reserve.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Car lookup activity in the mobile application.
 The car info is displayed when a marker on the map is clicked.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Car info activity in the mobile application.
 From this screen, the selected car can be reserved by clicking the green
 circular bottom right button.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="50text%">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../rasd/mockups/unlock.png
	scale 25

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
My reservation activity in the mobile application.
 From this screen the car can be remotely unlocked by clicking the green
 button.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Requirements traceability
\end_layout

\begin_layout Subsection
Functional requirements and components
\end_layout

\begin_layout Standard
The following table shows the mapping between specific requirements identified
 in section 3.2 of the RASD and business logic components described in the
 DD.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="right" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="70text%">
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Account Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R1.
 On registration, a person must be asked: e-mail address, username, pass-
 word, name, surname, birth date, address, phone number, driving license
 number, billing information.
\end_layout

\begin_layout Plain Layout
R2.
 There mustn't be another user already registered with the same e-mail address,
 username, or driving license number.
\end_layout

\begin_layout Plain Layout
R3.
 The password must be at least 8 characters long and it must contain at
 least one lowercase character, one uppercase character, and one digit.
\end_layout

\begin_layout Plain Layout
R4.
 The password must be asked twice.
 The two passwords must match.
\end_layout

\begin_layout Plain Layout
R5.
 On login, the system must grant the user access to the account if and only
 if the following conditions are met:
\end_layout

\begin_layout Itemize
(a) The inserted username corresponds to a username of an existing user,
 or the inserted e-mail corresponds to the registration e-mail of an existing
 user.
\end_layout

\begin_layout Itemize
(b) The inserted password matches with that of the user identified above.
\end_layout

\begin_layout Plain Layout
R6.
 If the entered password is wrong, a new attempt can be made only 10 seconds
 later.
\end_layout

\begin_layout Plain Layout
R32.
 If the payment operation of a user fails due to insuffcient funds, then
 that user is banned until he/she pays it off.
\end_layout

\begin_layout Plain Layout
R33.
 If a user is banned, the system must prevent him/her from having access
 to the service.
\end_layout

\begin_layout Plain Layout
R34.
 The user must be able to view the information in his/her profile.
\end_layout

\begin_layout Plain Layout
R35.
 The user must be able to edit the information in his/her profile, according
 to information fields' constraints.
\end_layout

\begin_layout Plain Layout
R36.
 The user must be able to delete his/her profile.
\end_layout

\begin_layout Plain Layout
R37.
 The system must generate special credential for employees.
\end_layout

\begin_layout Plain Layout
R40.
 The system must store users' information into a database.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reservation Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R7.
 The user can choose to find cars around his/her position, or around a specied
 address.
\end_layout

\begin_layout Plain Layout
R8.
 The user must be shown a map of the selected position, on which the locations
 of available cars are marked.
\end_layout

\begin_layout Plain Layout
R9.
 The system charges the user in advance with 1 EUR deposit.
 The deposit is given back to the user if he turns on the engine.
\end_layout

\begin_layout Plain Layout
R10.
 If an error occurs while charging the user with the down payment then an
 error message is displayed and the reservation operation is aborted.
\end_layout

\begin_layout Plain Layout
R11.
 The user must be able to click on a marked location on the map in order
 to view additional information on the car at that position.
\end_layout

\begin_layout Plain Layout
R12.
 The user must be able to view at least the exact address and the battery
 level of the selected car.
\end_layout

\begin_layout Plain Layout
R13.
 The user must be able to reserve the selected car by clicking on a button
 in the additional information screen.
 After the button has been clicked, the car state must be set to RESERVED
 and a new reservation must be created associated to the user and the selected
 car.
\end_layout

\begin_layout Plain Layout
R14.
 The user must not be able to reserve the selected car if there already
 exists a reservation made by the user himself/herself.
\end_layout

\begin_layout Plain Layout
R15.
 Any user who reserved a car in the last hour must be able to unlock the
 car he/she has reserved in one of the following ways:
\end_layout

\begin_layout Itemize
(a) If the reservation has been made via mobile app, the user must be able
 to unlock the car by clicking on a button in the reservation screen of
 the mobile app.
\end_layout

\begin_layout Itemize
(b) If the reservation has been made via web app, the user must be able
 to unlock the car by sending an SMS.
\end_layout

\begin_layout Plain Layout
R28.
 Any user who doesn't ignite the engine of the car he/she has reserved within
 an hour is charged with a fee of 1 EUR and his/her reservation is deleted.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ride Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R17.
 The system must keep track of the time spent from when the engine turns
 on until the engine turns off.
\end_layout

\begin_layout Plain Layout
R18.
 At the end of the ride the system waits for possible discounts to be applied
 to the final fare, and then interacts with the third party payment service
 and notifies the user with the report of the payment operation.
\end_layout

\begin_layout Plain Layout
R19.
 The system locks the car if it detects that nobody is inside the vehicle
 and doors are closed.
\end_layout

\begin_layout Plain Layout
R20.
 If the system fails in locking the car (e.g.
 doors are not closed) then a warning message is sent to the respective
 user.
\end_layout

\begin_layout Plain Layout
R21.
 If a user unlocks a locked car from the inside, then the system locks the
 car again.
\end_layout

\begin_layout Plain Layout
R22.
 If the car is detected to be at a charging area, then the system must wait
 for a fixed timeout of 2 minutes or until the car is plugged before charging
 the user.
\end_layout

\begin_layout Plain Layout
R23.
 If the number of people inside the car is measured to be 3 or more, the
 system must apply a 10% discount on the final fare.
\end_layout

\begin_layout Plain Layout
R24.
 If the battery level at the end of the ride is measured to be at least
 50% of the total charge, the system must apply a 20% discount on the final
 fare.
 R25.
 If the position of the car at the end of the ride is a charging area, and
 the car is plugged in within a 2 minutes time frame, the system must apply
 a 30% discount on the final fare.
\end_layout

\begin_layout Plain Layout
R26.
 If a ride is eligible for multiple discounts, only the largest is effectively
 applied to the final fare.
\end_layout

\begin_layout Plain Layout
R27.
 If the position of the car at the end of the ride is more than 3 km away
 from the nearest charging area or if the battery level is lower than 20%
 of the total charge, the system must apply a 30% additional charge on the
 final fare.
\end_layout

\begin_layout Plain Layout
R29.
 The user must be able to enable a money saving option as soon as he/she
 enters the car, by entering a specific destination.
\end_layout

\begin_layout Plain Layout
R30.
 The system estimates at which charging area the user has to park the car,
 depending on the specified destination and plug availability, in order
 to achieve a uniform distribution of cars.
\end_layout

\begin_layout Plain Layout
R31.
 The optimal route to reach the charging area is displayed to the user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maintenance Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R16.
 The system must inform an employee when a car is in low battery state.
\end_layout

\begin_layout Plain Layout
R38.
 Employees' account can lock and unlock every car.
\end_layout

\begin_layout Plain Layout
R39.
 Employees must be able to access an area where cars can be inserted to/deleted
 from the database.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Non-functional requirements
\end_layout

\begin_layout Standard
fare
\end_layout

\begin_layout Section
\start_of_appendix
Appendix A
\end_layout

\begin_layout Subsection
Software and tools used
\end_layout

\begin_layout Itemize
\SpecialChar LaTeX
 for typesetting the document.
\end_layout

\begin_layout Itemize
\SpecialChar LyX
 as a document processor.
\end_layout

\begin_layout Itemize
GitHub for version control and teamwork.
\end_layout

\begin_layout Itemize
Pencil for mockups.
\end_layout

\begin_layout Itemize
Draw.io for UML diagrams.
\end_layout

\begin_layout Itemize
Signavio for UML diagrams.
\end_layout

\begin_layout Subsection
Hours of work
\end_layout

\begin_layout Itemize
Alessio Mongelluzzo: ?? hours
\end_layout

\begin_layout Itemize
Michele Ferri: ?? hours
\end_layout

\begin_layout Itemize
Mattia Maffioli: ?? hours
\end_layout

\end_body
\end_document
